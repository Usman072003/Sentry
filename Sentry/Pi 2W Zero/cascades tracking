from flask import Flask, render_template, Response, request
from gpiozero import Servo
from gpiozero.pins.pigpio import PiGPIOFactory
from picamera import PiCamera
from picamera.array import PiRGBArray
import cv2
import curses
import threading

app = Flask(__name__)

# Use the pigpio pin factory for better PWM control (Pi Zero 2W)
factory = PiGPIOFactory()

# Define GPIO pins for the servos
servo1_pin = 12
servo2_pin = 13

# Initialize the servos with the pigpio pin factory
servo1 = Servo(servo1_pin, pin_factory=factory)
servo2 = Servo(servo2_pin, pin_factory=factory)

# Initialize the PiCamera for video streaming
camera = PiCamera()
camera.resolution = (640, 480)  # Adjust to suit your needs
camera.framerate = 30
rawCapture = PiRGBArray(camera, size=(640, 480))

# Load Haar Cascade Classifier for face detection
face_cascade = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')

# Global state to toggle face detection and servo control
face_detection_enabled = False
servo_control_enabled = True

# Function to control servo positions
def control_servo(servo, angle):
    if angle < -1:
        angle = -1
    elif angle > 1:
        angle = 1
    servo.value = angle

# Function to detect faces and draw rectangles
def detect_faces(frame):
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    faces = face_cascade.detectMultiScale(gray, scaleFactor=1.1, minNeighbors=5, minSize=(30, 30))
    for (x, y, w, h) in faces:
        cv2.rectangle(frame, (x, y), (x + w, y + h), (255, 0, 0), 2)  # Blue rectangle around face
    return frame

# Function to capture frames and either stream video or detect faces
def generate_frames():
    for frame in camera.capture_continuous(rawCapture, format="bgr", use_video_port=True):
        image = frame.array

        if face_detection_enabled:
            # Perform face detection if enabled
            image = detect_faces(image)

        # Encode the frame in JPEG format
        ret, buffer = cv2.imencode('.jpg', image)
        frame = buffer.tobytes()

        # Yield the output frame in byte format for streaming
        yield (b'--frame\r\n'
               b'Content-Type: image/jpeg\r\n\r\n' + frame + b'\r\n')

        rawCapture.truncate(0)

# Flask route for the homepage
@app.route('/')
def index():
    return render_template('index.html')

# Flask route for the video feed
@app.route('/video_feed')
def video_feed():
    return Response(generate_frames(), mimetype='multipart/x-mixed-replace; boundary=frame')

# Flask route to control servos
@app.route('/control_servo', methods=['POST'])
def control_servo_web():
    global servo_control_enabled
    if 'servo1_left' in request.form:
        control_servo(servo1, servo1.value - 0.05)
    elif 'servo1_right' in request.form:
        control_servo(servo1, servo1.value + 0.05)
    elif 'servo2_up' in request.form:
        control_servo(servo2, servo2.value + 0.05)
    elif 'servo2_down' in request.form:
        control_servo(servo2, servo2.value - 0.05)
    return ('', 204)

# Flask route to stop servos
@app.route('/stop_servo', methods=['POST'])
def stop_servo():
    control_servo(servo1, 0)
    control_servo(servo2, 0)
    return ('', 204)

# Flask route to toggle face detection
@app.route('/toggle_face_detection', methods=['POST'])
def toggle_face_detection():
    global face_detection_enabled
    face_detection_enabled = not face_detection_enabled
    return ('', 204)

# Flask route to toggle servo control
@app.route('/toggle_servo_control', methods=['POST'])
def toggle_servo_control():
    global servo_control_enabled
    servo_control_enabled = not servo_control_enabled
    return ('', 204)

# Function to control servos via terminal (curses interface)
def main_curses(stdscr):
    # Initialize the current positions of the servos
    curr1 = 0  # Start at midpoint for continuous servos
    curr2 = 0

    # Clear screen and display instructions
    stdscr.clear()
    stdscr.addstr(0, 0, "Control Servo1: d to increase, a to decrease | Control Servo2: w to increase, s to decrease")
    stdscr.addstr(2, 0, f"Servo1 Position: {curr1}, Servo2 Position: {curr2}")

    while True:
        # Wait for a single key press
        key = stdscr.getch()

        # Control Servo1 (Horizontal Movement)
        if key == ord('d') and curr1 < 1:
            curr1 = min(1, curr1 + 0.05)
            control_servo(servo1, curr1)
        elif key == ord('a') and curr1 > -1:
            curr1 = max(-1, curr1 - 0.05)
            control_servo(servo1, curr1)

        # Control Servo2 (Vertical Movement)
        elif key == ord('w') and curr2 < 1:
            curr2 = min(1, curr2 + 0.05)
            control_servo(servo2, curr2)
        elif key == ord('s') and curr2 > -1:
            curr2 = max(-1, curr2 - 0.05)
            control_servo(servo2, curr2)

        # Exit the program
        elif key == ord('q'):
            stdscr.addstr(4, 0, "Exiting the program.")
            stdscr.refresh()
            break

        # Update the display with new positions
        stdscr.clear()
        stdscr.addstr(0, 0, "Control Servo1: d to increase, a to decrease | Control Servo2: w to increase, s to decrease")
        stdscr.addstr(2, 0, f"Servo1 Position: {curr1:.2f}, Servo2 Position: {curr2:.2f}")
        stdscr.refresh()

# Function to run curses in a separate thread
def run_curses():
    curses.wrapper(main_curses)

# Function to run Flask app
def run_flask():
    app.run(host='0.0.0.0', port=5000, threaded=True)

# Main entry point to run both Flask and curses
if __name__ == '__main__':
    # Create a thread for curses
    curses_thread = threading.Thread(target=run_curses)
    curses_thread.start()

    # Run Flask in the main thread
    run_flask()
